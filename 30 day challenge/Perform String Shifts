You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:

direction can be 0 (for left shift) or 1 (for right shift). 
amount is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.
Return the final string after all operations.

 

Example 1:

Input: s = "abc", shift = [[0,1],[1,2]]
Output: "cab"
Explanation: 
[0,1] means shift to left by 1. "abc" -> "bca"
[1,2] means shift to right by 2. "bca" -> "cab"
Example 2:

Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: "efgabcd"
Explanation:  
[1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
[1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
[0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
[1,3] means shift to right by 3. "abcdefg" -> "efgabcd"

class Solution(object):
    def stringShift(self, s, shift):
        """
        :type s: str
        :type shift: List[List[int]]
        :rtype: str
        """
        #combine shifts first
        sum_shift = [];
        for i in shift:
            if len(sum_shift) == 0:
                sum_shift = i
            elif i[1] > sum_shift[1]:
                if i[0] != sum_shift[0]:
                    sum_shift = [i[0], i[1] - sum_shift[1]]
                else:
                    sum_shift = [i[0], i[1] + sum_shift[1]]
            elif i[1] == sum_shift[1]:
                if i[0] == sum_shift[0]:
                    sum_shift = [i[0], i[1] + sum_shift[1]]
                else:
                    sum_shift = [0, 0]
            else:
                if i[0] != sum_shift[0]:
                    sum_shift = [sum_shift[0], sum_shift[1] - i[1]]
                else:
                    sum_shift = [i[0], i[1] + sum_shift[1]]
        
        if sum_shift[1] == len(s):
            return s
        elif sum_shift[1] < len(s):
            if sum_shift[0] == 0:
                return s[sum_shift[1]:] + s[:sum_shift[1]]
            else:
                return s[-sum_shift[1]:] + s[:-sum_shift[1]]
        else:
            real_shifts = sum_shift[1] % len(s)
            if sum_shift[0] == 0:
                return s[real_shifts:] + s[:real_shifts]
            else:
                return s[-real_shifts:] + s[:-real_shifts]
